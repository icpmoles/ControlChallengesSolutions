---
title: "Performance tricks"
code-fold: show
---

## Hurwitz Check

Create our nice model.
Assume to have run the `poles` function and that you have a vector of eigenvalues. For simplicity I will create an arbitrary vector with the first 100 values in $-1$ and the last 100 values as random around $0$.

```{julia}
using BenchmarkTools

vbig = [zeros(ComplexF64,100).-1 ; rand(ComplexF64,100).-0.5];

vbig[[1,end]]
```

### `for` loop


With a naive approach we check if all the  elements are in the LHP: make a function that iterates and returns false if it hits a pole with positive real part.


```{julia}
function isHurwitz(v)
    for i in eachindex(v)
        if real(v[i])>0.0
            return false
        end
    end
    return true
end

@benchmark isHurwitz($(Ref(vbig))[])
```

We have our baseline. We can probably squeeze out some more performance but I'm still a Julia noob.


### `all()`


Let's try using some of the built-in declarative functions:
```{julia}
@benchmark all(real($vbig).<=0.0)
```

Simple `all()`, when given a tuple it checks if all the values are `True`, otherwise it stops when it encounters the first `False`. 

We can see that it's a tad slower. This is because it's creating a new vector with just the real parts, then it's creating a new vector with only the boolean results and then it's checking if there are any False results. 

This results in a lot of allocations and wasted resources.


```{julia}
@benchmark all(<=(0.0),real($vbig))
```


A smarter way is to skip on of the allocations by creating the vector of real parts and then checking row by row if the non-positivity check fails.


```{julia}
@benchmark all(i -> real(i)<=0.0,$vbig)
```
We can do better: Instead of converting into real the full vector it checks element by element if it's in the LHP. It returns false at the first failure. We finally have a comparable result to the benchmark function but in a more compact way. 

Is it cleaner? That's subjective.

### `mapreduce()`

Finally we try the MapReduce approach. This allows a better utilization of your processor without the necessity of learning parallel programming.

```{julia}
@benchmark mapreduce(i->real(i)<=0.0, &, $vbig)
```

We squeeze the last bit of performance and beat the initial benchmark, not by much but still appreciable.