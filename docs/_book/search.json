[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Control Challenges: Solutions",
    "section": "",
    "text": "0.1 What is this?\nThis is a collection of write ups on how to solve the various problems presented by Github user “Janismac”.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "solution_01_01.html",
    "href": "solution_01_01.html",
    "title": "2  Block With Friction",
    "section": "",
    "text": "2.1 State Space representation\nWe can convert the set of ODE into a state space representation. The final bode plot of the block position is:\nCode\nusing DiscretePIDs, ControlSystems, Plots, LinearAlgebra\n\n# System parameters\nTs = 0.02 # sampling time\nTf = 2.5; #final simulation time\ng = 9.81 #gravity\nα = 0.0 # slope\nμ = 1.0 # friction coefficient\nx_0 = -2.0 # starting position\ndx_0 = 0.0 # starting velocity\nτ = 20.0 # torque constant \n\n# State Space Matrix\nA = [0 1 0\n    0 -μ 1\n    0 0 -τ\n]*1.0;\nB = [0\n    0\n    τ]*1.0;\nC = [1 0 0\n    0 1 0]*1.0\n\nsys = ss(A, B, C, 0)      # Continuous\n\nbodeplot(tf(sys))\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.1: Starting Bode Plot\nIt has the shape we expect from a motor + friction. Slow pole for the mass + friction and a faster pole for the current & inductance.\nNumerically they are:\nCode\ndisplay(eigvals(A)) # -20 , -1, 0  \ndisplay(pzmap(tf(sys)))\n\n\n\n\n\n\n\n3-element Vector{Float64}:\n -20.0\n  -1.0\n   0.0\n\n\n(a) Starting PZ map\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\nFigure 2.2\nIn Figure 2.2 we see that we start with all the pole in the left-half plane, which is good.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Block With Friction</span>"
    ]
  },
  {
    "objectID": "solution_01_01.html#pole-placement",
    "href": "solution_01_01.html#pole-placement",
    "title": "2  Block With Friction",
    "section": "2.2 Pole Placement",
    "text": "2.2 Pole Placement\nWe can design a controller with pole placement.\nFor some reason pole placement doesn’t work for the observer, I use a Kalman Filter with random fast values.\n\n\nCode\ndisplay(observability(A, C)); #OK\ndisplay(controllability(A, B)); #OK\nϵ = 0.01;\npp = 15;\np = -2* [pp + ϵ , pp - ϵ , (pp / 4)];\nL = real(place(sys, p, :c));\n\npoles_obs = p*5.0\nK = place(1.0*A',1.0*C', poles_obs)'\ncont = observer_controller(sys, L, K; direct=false);\n\n\n\n┌ Warning: Max iterations reached\n└ @ ControlSystemsBase C:\\Users\\icpmoles\\.julia\\packages\\ControlSystemsBase\\IeuPW\\src\\synthesis.jl:310\n\n\n\n\n(isobservable = true, ranks = [3, 3, 3], sigma_min = [0.05255163155979671, 1.0000000000000002, 1.0])\n\n\n(iscontrollable = true, ranks = [3, 3, 3], sigma_min = [18.82217025796643, 0.7247734159618929, 0.46815777001494974])\n\n\nWe can check the effect of the new controller on the loop\n\n\nCode\nclosedLoop = feedback(sys*cont)\nprint(poles(closedLoop));\nsetPlotScale(\"dB\")\ndisplay(bodeplot(closedLoop[1, 1], 0.1:40))\ndisplay(pzmap(closedLoop))\n\n\nComplexF64[-150.09999999999997 + 0.0im, -149.89999999999995 + 0.0im, -7.500000000000134 + 0.0im, -29.979999999868912 + 0.0im, -30.020000000130636 + 0.0im, -37.50000000000044 + 0.0im]\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can compare this to the open-loop response in Figure 2.1. We can see that we achieve unitary gain throughout the whole low-frequency range.\nWe can convert the pole placement controller into the standard PD gain form.\n\n\nCode\nK = L[1];\nTi = 0;\nTd = L[2] / L[1];\npid = DiscretePID(; K, Ts, Ti, Td);",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Block With Friction</span>"
    ]
  },
  {
    "objectID": "solution_01_01.html#simulation",
    "href": "solution_01_01.html#simulation",
    "title": "2  Block With Friction",
    "section": "2.3 Simulation",
    "text": "2.3 Simulation\nWe can simulate this with a motor that only outputs the position:\n\n\nCode\nsysreal = ss(A, B, [1 0 0], 0)\nctrl = function (x, t)\n    y = (sysreal.C*x)[] # measurement\n    d = 0 * [1.0]        # disturbance\n    r = 2 * (t &gt;= 1) # reference\n    # u = pid(r, y) # control signal\n    # u + d # Plant input is control signal + disturbance\n    # u =1\n    e = x - [r; 0; 0]\n    e[3] = 0 # torque not observable, just ignore it in the final feedback\n    u = -L * e + d\n    u = [maximum([-20 minimum([20 u])])]\nend\nt = 0:Ts:Tf\n\n\nres = lsim(sysreal, ctrl, t)\n\nplot(res, plotu=true, plotx=true, ploty=false);ylabel!(\"u\", sp=1);ylabel!(\"x\", sp=2);ylabel!(\"v\", sp=3);ylabel!(\"T\", sp=4)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor more stats:\n\n\nCode\nsi = stepinfo(res);\nplot(si);title!(\"Step Response\")\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also simulate it in a SIMULINK-like environment:\n\n\nCode\nusing FMI, DifferentialEquations\nfmu = loadFMU(abspath(\"../modelica/ControlChallenges/ControlChallenges.BlockOnSlope_Challenges.Examples.WithFriction.fmu\"));\nsimData = simulateME(fmu, (0.0, 5.0); recordValues=[\"blockOnSlope.x\",\"blockOnSlope.xd\",\"blockOnSlope.usat\"]);\nunloadFMU(fmu);\nplot(simData, states=false, timeEvents=false)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere is a slight difference between the lsim simulation and the FMU simulation. I need to recheck some stuff.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Block With Friction</span>"
    ]
  }
]